// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum TripStatus {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
}

enum BookingLogsAction {
  CREATE
  UPDATE
  DELETE
  DELETE_MANY
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  trips                 Bookings[]
  logs                  BookingLogs[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Driver {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  phone      String
  orderIndex Int        @default(0)
  vehicle    Vehicle?
  reviews    Review[]
  trips      Bookings[]
}

model Vehicle {
  id       String @id @default(uuid())
  driverId String @unique
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  brand    String
  model    String
  plate    String @unique
}

model Bookings {
  id              String        @id @default(uuid())
  customerName    String
  pickUpLocation  String
  dropOffLocation String
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  driverId        String
  driver          Driver        @relation(fields: [driverId], references: [id], onDelete: Cascade)
  rideStatus      TripStatus
  createdAt       DateTime      @default(now())
  orderIndex      Int           @default(0)
  logs            BookingLogs[]

  @@index([userId])
  @@index([driverId])
}

model Review {
  id       String  @id @default(uuid())
  userId   String
  driverId String
  tripId   String  @unique
  rating   Int     @default(5) // 1-5 sao
  comment  String?

  driver Driver @relation(fields: [driverId], references: [id])

  @@unique([userId, tripId])
}

model BookingLogs {
  id        String            @id @default(uuid())
  bookingId String?
  booking   Bookings?         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  action    BookingLogsAction
  timestamp DateTime          @default(now())
  details   Json

  @@index([bookingId])
  @@index([userId])
}
